
  - name: install-home-db | Mount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=mounted
    when: install_from_nfs
    tags:
      - nfsmountdb

  - name: install-home-db | Add oraInst.loc
    template: src=oraInst.loc.j2 dest=/etc/oraInst.loc owner={{ oracle_user }} group={{ oracle_group }} mode=644 backup=yes
    tags:
    - orainst

  - name: install-home-db | Create common directories
    file: dest={{ item.name }} mode={{ item.mode}} owner={{ item.owner }} group={{ item.group }} state=directory
    with_items: "{{oracle_directories}}"
    tags:
      - directoriesdb

  - name: install-home-db | Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item.oracle_version_db }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items:
       - "{{ oracle_databases }}"
    run_once: "{{ configure_cluster}}"
    when: oracle_databases is defined
    tags:
      - directoriesdb

  - name: install-home-db | Create ORACLE_HOME directory
    file: dest={{ oracle_home_db }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items: "{{oracle_databases}}"
    tags:
      - directoriesdb

  - include_tasks: "{{ www_download_bin }}.yml"
    when: not is_sw_source_local and oracle_sw_copy

  - name: install-home-db | Transfer oracle installfiles to server (local)
    copy: src={{ oracle_sw_source_local }}/{{ item[0].filename }} dest={{ oracle_stage }} mode=775 force=no owner={{ oracle_user }} group={{ oracle_group }}
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and is_sw_source_local and oracle_sw_copy
    tags:
      - oradbsw

  - name: install-home-db | Extract files to stage-area
    unarchive:
        src={{ oracle_stage }}/{{ item[0].filename }}
        dest={{ oracle_stage }}/{{ item[0].version }}
        copy=no
        creates="{{ oracle_stage }}/{{ item[0].version }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and oracle_sw_copy and oracle_sw_unpack
    tags:
      - oradbswunpack

  - name: install-home-db | Extract files to stage-area (from remote location)
    unarchive:
        src={{ oracle_stage_remote }}/{{ item[0].filename }}
        dest={{ oracle_stage }}/{{ item[0].version }}
        copy=no
        creates="{{ oracle_stage }}/{{ item[0].version }}/{{ item[0].creates}}"
    with_nested:
      - "{{oracle_sw_image_db}}"
      - "{{oracle_databases}}"
    become: yes
    become_user: "{{ oracle_user }}"
    run_once: "{{ configure_cluster}}"
    when: item[0].version == item[1].oracle_version_db and not oracle_sw_copy and oracle_sw_unpack
    tags:
      - oradbswunpack

  - include_tasks: install-home-db.yml
    with_items:
        - "{{ oracle_databases }}"
    loop_control:
      loop_var: dbh
    when: oracle_databases is defined
    tags: oradbinstall

  - name: install-home-db | Unmount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=absent
    when: install_from_nfs
    tags:
      - nfsunmountdb

  - name: install-home-db | Check if systemd or init.d is used
    shell: ps -e|grep " 1 ?"|cut -d " " -f15
    tags:
    - checkinitdaemons
    - autostartup_service
    register: checkinitdaemons
    when: autostartup_service

  - include_tasks: "{{ checkinitdaemons.stdout }}.yml"
    when: autostartup_service
